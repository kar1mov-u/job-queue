// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: 001_tasks.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createTask = `-- name: CreateTask :one
INSERT INTO tasks(
    status) VALUES($1)
    RETURNING id
`

func (q *Queries) CreateTask(ctx context.Context, status string) (uuid.UUID, error) {
	row := q.db.QueryRowContext(ctx, createTask, status)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const getTasks = `-- name: GetTasks :many
SELECT id, created_at, completed_at, status, link
FROM tasks
WHERE created_at BETWEEN $1 AND $2
ORDER BY created_at ASC
`

type GetTasksParams struct {
	CreatedAt   sql.NullTime
	CreatedAt_2 sql.NullTime
}

func (q *Queries) GetTasks(ctx context.Context, arg GetTasksParams) ([]Task, error) {
	rows, err := q.db.QueryContext(ctx, getTasks, arg.CreatedAt, arg.CreatedAt_2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.CompletedAt,
			&i.Status,
			&i.Link,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateStatus = `-- name: UpdateStatus :exec
UPDATE tasks SET status = $1 WHERE id=$2
`

type UpdateStatusParams struct {
	Status string
	ID     uuid.UUID
}

func (q *Queries) UpdateStatus(ctx context.Context, arg UpdateStatusParams) error {
	_, err := q.db.ExecContext(ctx, updateStatus, arg.Status, arg.ID)
	return err
}
